{"version":3,"sources":["goldRecord.png","logo.svg","email.Regex.js","snoopAlbums.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","__webpack_require__","p","email_Regex","snoopAlbums","name","year","cover","checkEmail","email","emailRegex","test","App","state","modalOpen","rapName","isEmailValid","albumSales","topAlbum","albumMenuOpen","startDate","setRapName","event","_this","setState","target","value","setEmail","setAlbumSales","Math","max","Number","toggleModal","toggleAlbumMenu","selectAlbum","album","setStartDate","date","done","console","log","_this2","this","react_default","a","createElement","className","onChange","length","type","step","filter","x","map","n","key","src","goldrecord","onClick","Fragment","alt","es","selected","viewBox","cx","cy","r","d","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.c1f3096b.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/goldRecord.6a2018c3.png\";","module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","// eslint-disable-next-line\nexport default /(?:[a-z0-9!#$%&'*+/=?^_`{|}~-]+(?:\\.[a-z0-9!#$%&'*+/=?^_`{|}~-]+)*|\"(?:[\\x01-\\x08\\x0b\\x0c\\x0e-\\x1f\\x21\\x23-\\x5b\\x5d-\\x7f]|\\\\[\\x01-\\x09\\x0b\\x0c\\x0e-\\x7f])*\")@(?:(?:[a-z0-9](?:[a-z0-9-]*[a-z0-9])?\\.)+[a-z0-9](?:[a-z0-9-]*[a-z0-9])?|\\[(?:(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\.){3}(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?|[a-z0-9-]*[a-z0-9]:(?:[\\x01-\\x08\\x0b\\x0c\\x0e-\\x1f\\x21-\\x5a\\x53-\\x7f]|\\\\[\\x01-\\x09\\x0b\\x0c\\x0e-\\x7f])+)\\])/","export default [\n  { name: 'Doggystyle', year: 1993, cover: 'https://upload.wikimedia.org/wikipedia/en/6/63/SnoopDoggyDoggDoggystyle.jpg' },\n  { name: 'Tha Doggfather', year: 1996, cover: 'https://upload.wikimedia.org/wikipedia/en/a/a3/Tha-doggfather.jpg' },\n  { name: 'Da Game is to Be Sold, Not to Be Told', year: 1998, cover: 'https://upload.wikimedia.org/wikipedia/en/c/c5/Gameistobesold.jpg' },\n  { name: 'No Limit Top Dogg', year: 1999, cover: 'https://upload.wikimedia.org/wikipedia/en/d/d1/Snoop_front.JPG' },\n  { name: 'Tha Last Meal', year: 2000, cover: 'https://upload.wikimedia.org/wikipedia/en/d/dc/The_Last_Meal_-_Front.jpeg' },\n];","import React from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport emailRegex from './email.Regex';\nimport goldrecord from './goldRecord.png';\nimport snoopAlbums from './snoopAlbums.js';\nimport DatePicker from 'react-datepicker';\nimport 'react-datepicker/dist/react-datepicker.css';\n\nconst checkEmail = (email)=>\n  emailRegex.test(email);\n\n\n\nclass App extends React.Component {\n\n  state = {\n    modalOpen:false,\n    rapName:'',\n    email:'',\n    isEmailValid:false,\n    albumSales : 10000,\n    topAlbum : null ,\n    albumMenuOpen : false,\n    startDate : null ,\n  }\n\n  setRapName= (event)=>{\n    this.setState({\n      rapName: event.target.value\n    })\n  }\n\n  setEmail= (event)=>{\n    this.setState({\n      email: event.target.value,\n      isEmailValid:checkEmail(event.target.value)\n    })\n  }\n\n  setAlbumSales =(event)=>{\n    this.setState({\n      albumSales:Math.max(0,Number(event.target.value)),\n    })\n  }\n\n  toggleModal= () =>\n  this.setState ({\n    modalOpen: !this.state.modalOpen\n  })\n\n  toggleAlbumMenu= ()=>\n  this.setState({\n    albumMenuOpen: !this.state.albumMenuOpen,\n  })\n\nselectAlbum = (album) =>\nthis.setState({\n  topAlbum: album\n})\n\nsetStartDate = (date)=> \nthis.setState({\n  startDate: date\n})\n\n  done = (event)=>{\n    this.toggleModal();\nconsole.log('done applying , it is friday, now i got nothing to do');    \n  }\n  render(){\n    console.log(this.state.isEmailValid);\n  return (\n    <div className=\"App\">\n      <div className='form'>\n      <div className = 'card swanky-input-container'>\n        <label>\n          <input value = {this.state.rapName} onChange={this.setRapName} />\n          <span className = 'title'>Rap Name </span>\n        </label>\n      </div>\n      <div className = 'card swanky-input-container'>\n        <label>\n          <input value = {this.state.email} onChange={this.setEmail} />\n          <span className = 'title'>Email </span>\n          {\n            (this.state.isEmailValid || this.state.email.length < 1) ? (null) : (\n              <span className='email-invalid'>Entrez un email valide svp </span>\n\n              )\n          }\n        </label>\n      </div>\n      \n      <div className = 'card swanky-input-container'>\n        <label>\n          <input \n          type = 'number' \n          step={100000} \n          value = {this.state.albumSales} \n          onChange={this.setAlbumSales} />\n          <span className = 'title'>album Sales </span>\n        </label>\n          <div className='goldRecords'>\n          {\n            [1,2,3,4] \n            .filter(x => x*1000000 < this.state.albumSales)\n\n            .map(n=>(\n              <div className='goldRecord' key={n}>\n              <img src = {goldrecord}/>\n              </div>\n              ))\n          }\n          </div>\n      </div>\n\n      <div className = 'card swanky-input-container'>\n          <span className = 'title'>Top Album </span>\n          <div className='album-dropdown-base' onClick={this.toggleAlbumMenu}>\n          {this.state.topAlbum === null ? (\n            <span> Select the best Albums</span>\n            ) : (\n            <>\n              <img src={this.state.topAlbum.cover} \n                  alt={this.state.topAlbum.name} />\n              <span>{this.state.topAlbum.year}</span>\n              <span>{this.state.topAlbum.name}</span>\n            </>\n            )}\n            <span className='dropdown-arrow'>\n                  {this.state.albumMenuOpen ? '▲' : '▼' }\n            </span>\n            </div>\n            {\n              this.state.albumMenuOpen ? (\n                <ul className='album-menu'>\n                {\n                  snoopAlbums.map((album)=>(\n                    <li key={album.name} onClick={ () => this.selectAlbum(album)}>\n                      <img src={album.cover} />\n                      <span>{album.year}</span>\n                      <span>{album.name}</span>\n                    </li>\n                     ))\n                }\n\n                </ul>\n                ) : null\n            }\n      </div>\n\n      <div className = 'card swanky-input-container'>\n        <label>\n          <DatePicker selected= {this.state.startDate}\n                     onChange={this.setStartDate} />\n          <span className = 'title'>Start Date </span>\n        </label>\n      </div>\n\n\n\n        <div className ='done-container'>\n          <button className = 'done-button' onClick={this.done}>Done</button>\n        </div>\n      </div>\n      <div className= {this.state.modalOpen ? 'modalOpen' : 'modalClosed'}>\n      <h2>\n      CONFIRMATION\n      </h2>\n      <p>are you sure you are ready with your app ?? </p>\n      <button onClick={this.done}>Confirm!!</button>\n      <svg viewBox='0 0 100 100' className='xbutton' onClick={this.toggleModal}>\n        <circle cx={50} cy={50} r={47}></circle>\n        <path d='M 30 30 L 70 70' />\n        <path d='M 70 30 L 30 70' />\n\n      </svg>\n      </div>\n      {\n        this.state.modalOpen ? (\n          <div className='modal-shade' onClick={this.toggleModal}/>\n          ) : null \n      }\n\n    </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}